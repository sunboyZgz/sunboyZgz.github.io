<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>新的博客</title>
    <link href="/2022/08/24/newblog/"/>
    <url>/2022/08/24/newblog/</url>
    
    <content type="html"><![CDATA[<h1 id="Github-Page-Custom-Domain"><a href="#Github-Page-Custom-Domain" class="headerlink" title="Github Page-Custom Domain"></a>Github Page-Custom Domain</h1><h2 id="1-原因"><a href="#1-原因" class="headerlink" title="1.原因"></a>1.原因</h2><p>众所周知<code>github</code>提供了一个<code>github-page</code>的服务，但是有些人很困惑为什么只能部署一个项目，但其实并不是这样的。<code>github-page</code>setting中的<code>custom domain</code>能很好的利用这个服务为我们部署多个项目。</p><p>本质上是利用<code>github</code>为每一个用户提供的一个个人站点(<code>username.github.io</code>)（相当于提供了静态服务器已经一个绑定的域名），进行<code>DNS</code>映射这样就能在剩下服务器的时候进行一些个人项目部署。</p><h2 id="2-具体操作"><a href="#2-具体操作" class="headerlink" title="2.具体操作"></a>2.具体操作</h2><h4 id="1-首先我们需要一个域名"><a href="#1-首先我们需要一个域名" class="headerlink" title="1.首先我们需要一个域名"></a>1.首先我们需要一个域名</h4><p>如何获取域名自行解决，我是在阿里收购的域名提供商那边买的</p><h4 id="2-进行域名解析，使username-github-io与你购买的一级域相映射"><a href="#2-进行域名解析，使username-github-io与你购买的一级域相映射" class="headerlink" title="2.进行域名解析，使username.github.io与你购买的一级域相映射"></a>2.进行域名解析，使<code>username.github.io</code>与你购买的一级域相映射</h4><p>这一步我是在阿里云的域名解析里做的，其他方式大同小异</p><p>1.在域名解析里采用CNAME的形式将一个对我自己的域名（zhugezhen.cn)和<code>sunboyzgz.github.io</code></p><p>进行一个映射。</p><p>下一步在<strong>setting</strong>中的<strong>pages</strong>设置中操作</p><p>2.在<strong>Build and deployment</strong>的<strong>source</strong>选项下选择<strong>deploy from a branch</strong>，然后选择你要部署的目录，也就是你希望展示的<code>index.html</code>所存在的目录。不同于<code>deploy from a branch</code>github也为我们提供了一个<strong>github actions</strong>的选择，这里就是后面要讲的<code>github actions</code>。</p><p>3.选择一个<code>custom domain</code>这里就是我们自己购买的域名填入即可</p><p><strong>note</strong>!!: 使用二级域名与<code>custom domain</code>相互映射的方案我们可以部署多个项目，并且这些项目并不需要都在<code>username.github.io</code>这个仓库下, 不过二级域名也是直接映射到<code>username.github.io</code>这个域。</p><p>这里假设我们的生成的二级域名是<code>book.zhugezhen.cn</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//域名解析中 CNAME形式，当然也可以使用ip的形式</span><br>zhugezhen<span class="hljs-selector-class">.cn</span> -&gt; sunboyzgz<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.io</span><br>book<span class="hljs-selector-class">.zhugezhen</span><span class="hljs-selector-class">.cn</span> -&gt; sunboyzgz<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.io</span><br><span class="hljs-comment">//setting pages CNAME</span><br>custom domain save <span class="hljs-selector-tag">a</span> zhugezhen<span class="hljs-selector-class">.cn</span><br>custom domain save <span class="hljs-selector-tag">a</span> book<span class="hljs-selector-class">.zhugezhen</span>.cn<br></code></pre></td></tr></table></figure><h1 id="Github-Actions"><a href="#Github-Actions" class="headerlink" title="Github Actions"></a>Github Actions</h1><h2 id="1-原因-1"><a href="#1-原因-1" class="headerlink" title="1.原因"></a>1.原因</h2><p>本质上，这就是github为我们提供的一个CI&#x2F;CD的能力</p><p>在<code>hexo</code>生成的blog项目中，我们虽然可以在本地进行<code>generate</code>然后将源代码同步到远程仓库的一个分支，然后再将需要展示的文件目录推送到另一个分支，但是这样会在每次操作时需要进行很多相同的重复操作。这项工作可以交给其他的工具进行比如<a href="https://github.com/marketplace/travis-ci">Travis CI</a>，我只是抱着学习的态度想要尝试一下<code>action</code>。</p><h2 id="2-如果你是hexo可以看下去，不是请跳过，直接到参考链接部分找寻答案"><a href="#2-如果你是hexo可以看下去，不是请跳过，直接到参考链接部分找寻答案" class="headerlink" title="2.如果你是hexo可以看下去，不是请跳过，直接到参考链接部分找寻答案"></a>2.如果你是hexo可以看下去，不是请跳过，直接到参考链接部分找寻答案</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">deploy</span> <span class="hljs-string">blog</span> <span class="hljs-string">to</span> <span class="hljs-string">gh-pages</span>  <span class="hljs-comment">#这个是一个workflow name</span><br><span class="hljs-attr">on:</span> <span class="hljs-comment">#监听push的事件</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span> <span class="hljs-comment">#对于main分支的push事件进行监听</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">main</span><br><span class="hljs-attr">jobs:</span> <span class="hljs-comment">#workflow中的jobs列表，jobs默认并发进行，如需相互依赖参考 need 属性的使用</span><br>  <span class="hljs-attr">generate-public:</span> <span class="hljs-comment">#job name</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span> <span class="hljs-comment">#运行的操作系统</span><br>    <span class="hljs-attr">steps:</span> <span class="hljs-comment">#操作步骤一步一步向下执行</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span> <span class="hljs-comment">#使用checkout action，提供摘取仓库的能力</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Node.js</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v3</span> <span class="hljs-comment">#一个配置node环境的action</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-number">16</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">packages</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-comment">#就像在本地用使用命令行一样</span><br>        <span class="hljs-comment">#这里要说一下，一个name下只能拥有一个run，有时可以像以下这样执行</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">generate</span> <span class="hljs-string">public</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">npx</span> <span class="hljs-string">hexo</span> <span class="hljs-string">clean</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">npx</span> <span class="hljs-string">hexo</span> <span class="hljs-string">generate</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Add</span> <span class="hljs-string">CNAME</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&#x27;zhugezhen.cn&#x27;</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">./public/CNAME</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">deploy</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">peaceiris/actions-gh-pages@v3</span> <span class="hljs-comment">#将目标目录push gh-pages分支的action</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">github_token:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITHUB_TOKEN</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">publish_dir:</span> <span class="hljs-string">./public</span><br></code></pre></td></tr></table></figure><p>这个<code>github actions</code>的配置其实就已经代替了<code>hexo</code>文档中<a href="https://hexo.io/zh-cn/docs/github-pages%E7%9A%84%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E%E4%BA%86%E3%80%82">https://hexo.io/zh-cn/docs/github-pages的操作说明了。</a></p><h4 id="3-参考链接"><a href="#3-参考链接" class="headerlink" title="3.参考链接"></a>3.参考链接</h4><p>1.请先了解github actions:<a href="https://docs.github.com/cn/actions/learn-github-actions/understanding-github-actions">https://docs.github.com/cn/actions/learn-github-actions/understanding-github-actions</a></p><p>2.可以看看这里面的基本使用：<a href="https://github.com/jaywcjlove/github-actions">https://github.com/jaywcjlove/github-actions</a></p><p>3.这个不重要随便看看就好：<a href="https://github.blog/2022-08-10-github-pages-now-uses-actions-by-default/">https://github.blog/2022-08-10-github-pages-now-uses-actions-by-default/</a></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新的篇章</title>
    <link href="/2022/08/23/My-new-way/"/>
    <url>/2022/08/23/My-new-way/</url>
    
    <content type="html"><![CDATA[<h1 id="为什么会有这篇文章？"><a href="#为什么会有这篇文章？" class="headerlink" title="为什么会有这篇文章？"></a>为什么会有这篇文章？</h1><p>由于最近c盘紧张，我重装了一次系统同进行了一些卷容量的调整，因为最近没有怎么写过blog在进行格式化的时候将原来搭建的个人blog给清除了而且也没有做备份，git page上传的也只是一个经过处理后的html文件，所以我原来的blog文件都丢失了。因为我需要进行一些环境配置，所以写下了这篇文章。</p><h1 id="nodejs-npm-pnpm-配置"><a href="#nodejs-npm-pnpm-配置" class="headerlink" title="nodejs + npm + pnpm 配置"></a>nodejs + npm + pnpm 配置</h1><h2 id="1-windows-下安装nodejs"><a href="#1-windows-下安装nodejs" class="headerlink" title="1.windows 下安装nodejs"></a>1.windows 下安装nodejs</h2><p><a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p><p>按照步骤安卓即可，注意一下nodejs的安装目录即可</p><h2 id="2-配置npm"><a href="#2-配置npm" class="headerlink" title="2.配置npm"></a>2.配置npm</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm config get prefix<br></code></pre></td></tr></table></figure><p>这条命令可以直接获取你的全局安装路径的前缀,这个前缀会用于</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm install <span class="hljs-literal">-g</span> xxxx<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm config <span class="hljs-built_in">set</span> prefix <span class="hljs-string">&quot;D:\Program Files\nodejs\node_global&quot;</span><br><br>npm config <span class="hljs-built_in">set</span> cache <span class="hljs-string">&quot;D:\Program Files\nodejs\node_cache&quot;</span><br></code></pre></td></tr></table></figure><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><ol><li></li></ol><p><code>NODE_PATH    D:\Program Files\nodejs\node_global\node_modules</code></p><p><code>NODE_PATH</code> 用于进行全局的模块检索，例如加载npm全局下的<code>express</code>模块的时候</p><ol start="2"><li></li></ol><p><code>PATHD D:\Program Files\nodejs\node_global</code></p><h2 id="3-配置pnpm"><a href="#3-配置pnpm" class="headerlink" title="3.配置pnpm"></a>3.配置pnpm</h2><p>注意此项可以不用配置，在没有配置的情况下会在当前卷的根目录创建<code>node_modules</code>进行管理。</p><p>如果想要pnpm跨磁盘或者卷进行管理可以按如下设置</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">pnpm config <span class="hljs-built_in">set</span> store<span class="hljs-literal">-dir</span> /path/to/.pnpm<span class="hljs-literal">-store</span><br></code></pre></td></tr></table></figure><p>参考链接：<a href="https://www.pnpm.cn/configuring%E3%80%81https://www.pnpm.cn/faq#store-path-is-not-specified">https://www.pnpm.cn/configuring、https://www.pnpm.cn/faq#store-path-is-not-specified</a></p><h4 id="4-修改install的镜像源"><a href="#4-修改install的镜像源" class="headerlink" title="4.修改install的镜像源"></a>4.修改install的镜像源</h4><p>这里就是淘宝的，要是用别的请搜索对应uri</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm config <span class="hljs-built_in">set</span> registry https://registry.npmmirror.com<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm config get registry<br></code></pre></td></tr></table></figure><h1 id="python-anaconda"><a href="#python-anaconda" class="headerlink" title="python anaconda"></a>python anaconda</h1><h2 id="1-安装anaconda"><a href="#1-安装anaconda" class="headerlink" title="1.安装anaconda"></a>1.安装anaconda</h2><p>大陆用户推荐用清华的源进行安装解决安装包下载过慢的问题</p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</a></p><h2 id="2-解决一些典型问题（待补充）"><a href="#2-解决一些典型问题（待补充）" class="headerlink" title="2.解决一些典型问题（待补充）"></a>2.解决一些典型问题（待补充）</h2><h4 id="1-pip-is-configured-with-locations-that-require-TLS-SSL"><a href="#1-pip-is-configured-with-locations-that-require-TLS-SSL" class="headerlink" title="1.[pip is configured with locations that require TLS/SSL]"></a>1.<code>[pip is configured with locations that require TLS/SSL]</code></h4><p><a href="https://stackoverflow.com/questions/45954528/pip-is-configured-with-locations-that-require-tls-ssl-however-the-ssl-module-in">https://stackoverflow.com/questions/45954528/pip-is-configured-with-locations-that-require-tls-ssl-however-the-ssl-module-in</a></p><p>一般我们都会把 python解释器和pip的路径加入环境，但是这里我们也需要加入第三个路径到环境中。（这里需要的原因可能是我在使用anaconda这个发型版本）</p><h2 id="3-修改local-cache"><a href="#3-修改local-cache" class="headerlink" title="3.修改local cache"></a>3.修改local cache</h2><p>下面这篇博文讲述了为什么需要这个cache</p><p><a href="https://www.techiediaries.com/python-pip-local-cache/">https://www.techiediaries.com/python-pip-local-cache/</a></p><p>配置方法:在<code>%HOME%</code>的<code>pip</code>目录下创建<code>pip.ini</code>（没有目录就自建一个）</p><p>找到<code>%HOME%</code>, 可以在文件资源管理器的路径栏输入<code>homepath</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[global]</span><br><span class="hljs-attr">cache-dir</span> = E:/languages/anaconda3/mypip/cache<br><span class="hljs-attr">log-file</span> = E:/languages/anaconda3/mypip/pip.log<br></code></pre></td></tr></table></figure><h2 id="4-修改pip安装源"><a href="#4-修改pip安装源" class="headerlink" title="4.修改pip安装源"></a>4.修改pip安装源</h2><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/">https://mirrors.tuna.tsinghua.edu.cn/help/pypi/</a></p><h4 id="5-检查一下配置情况"><a href="#5-检查一下配置情况" class="headerlink" title="5. 检查一下配置情况"></a>5. 检查一下配置情况</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">pip config list<br></code></pre></td></tr></table></figure><p><img src="/2022/08/23/My-new-way/image-20220823141458429.png" alt="result image"></p><h2 id="6-2022-x2F-8-x2F-27补充"><a href="#6-2022-x2F-8-x2F-27补充" class="headerlink" title="6. 2022&#x2F;8&#x2F;27补充:"></a>6. 2022&#x2F;8&#x2F;27补充:</h2><p>error:</p><blockquote><p>solving environment: failed with intitial frozen solve.Retrying with flexible solve.</p></blockquote><p><img src="/2022/08/23/My-new-way/image-20220827185106780.png" alt="error image"></p><h4 id="方案一：直面困难"><a href="#方案一：直面困难" class="headerlink" title="方案一：直面困难"></a>方案一：直面困难</h4><p>1.修改<code>conda</code>安装的镜像源为后续操作提速</p><p>具体修改方案可以参考清华提供的方案<code>.condarc</code></p><p>windows下使用命令生成在<code>%home%</code>目录下生成</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">conda config <span class="hljs-literal">--set</span> show_channel_urls yes<br></code></pre></td></tr></table></figure><p>然后将下方链接的中的配置复制到<code>.condarc</code>中</p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/</a></p><p>2. </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">conda update <span class="hljs-literal">-all</span><br></code></pre></td></tr></table></figure><h4 id="方案二：曲线救国"><a href="#方案二：曲线救国" class="headerlink" title="方案二：曲线救国"></a>方案二：曲线救国</h4><p>使用pip install 安装，但是这样的话不能享受到conda create env带来的好处。但是真的简单。</p><h4 id="方案三：降级conda策略"><a href="#方案三：降级conda策略" class="headerlink" title="方案三：降级conda策略"></a>方案三：降级conda策略</h4><p>网上自搜</p><h1 id="go"><a href="#go" class="headerlink" title="go"></a>go</h1><p>这个就是最为简单的了</p><p>去官网找个安装包跟着官网走就好了：<a href="https://go.dev/doc/install">https://go.dev/doc/install</a></p><p>安装好之后推荐修改一下<code>GOPATH</code>和<code>GOBIN</code>,目前版本<code> GO111MODULE</code>默认是设为<code>on</code></p><p>小小的看一下<code>GOPATH</code>的目录结构，以及功能：<a href="http://c.biancheng.net/view/88.html">http://c.biancheng.net/view/88.html</a></p><h2 id="1-在（用户环境变量）中修改GOPATH"><a href="#1-在（用户环境变量）中修改GOPATH" class="headerlink" title="1.在（用户环境变量）中修改GOPATH"></a>1.在（用户环境变量）中修改GOPATH</h2><p>把对应的变量改为你自己的目录路径即可</p><h4 id="2-GOBIN"><a href="#2-GOBIN" class="headerlink" title="2.GOBIN"></a>2.GOBIN</h4><p>这个可以不做，我做这个主要是让后期<code>install</code>的文件和<code>bin</code>目录下的开发者工具相隔离</p><h4 id="3-修改GOCACHE"><a href="#3-修改GOCACHE" class="headerlink" title="3.修改GOCACHE"></a>3.修改GOCACHE</h4><p>我也是简单地修改了一下<code>GOCACHE</code>,我是放在<code>GOPATH</code>之下的</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">go env <span class="hljs-literal">-w</span> GOCACHE=yourpath<br></code></pre></td></tr></table></figure><h2 id="4-设置代理"><a href="#4-设置代理" class="headerlink" title="4.设置代理"></a>4.设置代理</h2><p><a href="https://cloud.tencent.com/developer/article/1773630">https://cloud.tencent.com/developer/article/1773630</a></p><h5 id=""><a href="#" class="headerlink" title=""></a></h5><p>请忽略以下内容，仅仅为了测试 update blog 时间的配置</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
